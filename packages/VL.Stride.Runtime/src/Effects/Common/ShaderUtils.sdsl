
shader ShaderUtils
{
    // CONSTANTS ==============================================================
 
    static const float Pi =             3.1415926535897932384626433832795;
    static const float TwoPi =          6.283185307179586476925286766559;
    static const float OneOverPi =      0.31830988618379067153776752674503;
    static const float OneOverTwoPi =   0.15915494309189533576888376337251;
    static const float Epsilon =        0.0000000596; // as 5.96e-08 

    // SPRITES UTILS ==============================================================
 
    void CircleSpriteDiscard(float2 uv)
    {
        if(length(uv - 0.5f) > 0.5f)
        {
            discard;
        }
    }

    static const float3 QuadPositions[4] = {
        float3(-1, 1,0),
        float3( 1, 1,0),
        float3(-1, -1,0),
        float3( 1, -1,0),
    };

    static const float2 QuadUV[4] = {
        float2(0,1), 
        float2(1,1),
        float2(0,0),
        float2(1,0)
    };

    // CULLING ==============================================================

    bool DotCulling(float3 pos, float3 eye, float3 viewDirection, float CullingThreshold)
    {
        return DotCullingDbg(pos, eye, viewDirection) > CullingThreshold;
    }

    float DotCullingDbg(float3 pos, float3 eye, float3 viewDirection)
    {
        float3 vec = pos - eye;
        float dotValue = dot(normalize(vec), viewDirection);
    
        return dotValue;
    }

    // COLOR UTILS ==============================================================

    // Approximates luminance from an RGB value
    float Luminance(float3 color)
    {
        return dot(color, float3(0.299f, 0.587f, 0.114f));
    }

    float4 BitsToColor(float f)
    {
        uint u = asuint(f);
        float4 c;
        c = float4(
        (u>>0)%256,
        (u>>8)%256,
        (u>>16)%256,
        (u>>24)%256
        )/255.0;
        return c;
    }

    float3 HUEtoRGB(in float H)
    {
        H=frac(H);
        float R = abs(H * 6 - 3) - 1;
        float G = 2 - abs(H * 6 - 2);
        float B = 2 - abs(H * 6 - 4);
        return saturate(float3(R,G,B));
    }

    float3 HSVtoRGB(in float3 HSV)
    {
        float3 RGB = HUEtoRGB(HSV.x);
        return ((RGB - 1) * HSV.y + 1) * HSV.z;
    }

    float3 HSLtoRGB(in float3 HSL)
    {
        float3 RGB = HUEtoRGB(HSL.x);
        float C = (1 - abs(2 * HSL.z - 1)) * HSL.y;
        return (RGB - 0.5) * C + HSL.z;
    }

    /* previous RGBtoHSL */
    //float3 RGBtoHSV(in float3 RGB)
    //{
    //    float3 HSV = 0;
    //    HSV.z = max(RGB.r, max(RGB.g, RGB.b));
    //    float M = min(RGB.r, min(RGB.g, RGB.b));
    //    float C = HSV.z - M;
    //    if (C != 0)
    //    {
    //        float4 RGB0 = float4(RGB, 0);
    //        float4 Delta = (HSV.z - RGB0) / C;
    //        Delta.rgb -= Delta.brg;
    //        Delta.rgb += float3(2,4,6);
    //        Delta.brg = step(HSV.z, RGB) * Delta.brg;
    //        HSV.x = max(Delta.r, max(Delta.g, Delta.b));
    //        HSV.x = frac(HSV.x / 6);
    //        HSV.y = 1 / Delta.w;
    //    }
    //    return HSV;
    //}

    /* previous RGBtoHSL */
    //float3 RGBtoHSL(in float3 RGB)
    //{
    //    float3 HSL = 0;
    //    float U, V;
    //    U = -min(RGB.r, min(RGB.g, RGB.b));
    //    V = max(RGB.r, max(RGB.g, RGB.b));
    //    HSL.z = (V - U) * 0.5;
    //    float C = V + U;
    //    if (C != 0)
    //    {
    //        float3 Delta = (V - RGB) / C;
    //        Delta.rgb -= Delta.brg;
    //        Delta.rgb += float3(2,4,6);
    //        Delta.brg = step(V, RGB) * Delta.brg;
    //        HSL.x = max(Delta.r, max(Delta.g, Delta.b));
    //        HSL.x = frac(HSL.x / 6);
    //        HSL.y = C / (1 - abs(2 * HSL.z - 1));
    //    }
    //    return HSL;
    //}

    float3 RGBtoHCV(in float3 RGB)
      {
        // RGB - HSL - HSV conversions as by https://www.chilliant.com/rgb2hsv.html
        // Based on work by Sam Hocevar and Emil Persson
        float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0/3.0) : float4(RGB.gb, 0.0, -1.0/3.0);
        float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);
        float C = Q.x - min(Q.w, Q.y);
        float H = abs((Q.w - Q.y) / (6 * C + Epsilon) + Q.z);
        return float3(H, C, Q.x);
    }

    float3 RGBtoHSV(in float3 RGB)
    {
        float3 HCV = RGBtoHCV(RGB);
        float S = HCV.y / (HCV.z + Epsilon);
        return float3(HCV.x, S, HCV.z);
    }

    float3 RGBtoHSL(in float3 RGB)
    {
        float3 HCV = RGBtoHCV(RGB);
        float L = HCV.z - HCV.y * 0.5;
        float S = HCV.y / (1 - abs(L * 2 - 1) + Epsilon);
        return float3(HCV.x, S, L);
    }

        // convert rgb to yuv
    static const float4x4 RGBtoYUVMat = float4x4(0.257,  0.439, -0.148, 0.0,
                                              0.504, -0.368, -0.291, 0.0,
                                              0.098, -0.071,  0.439, 0.0,
                                              0.0625, 0.500,  0.500, 1.0);

    float4 RGBAtoYUV(in float4 RGBA)
    {
        return mul(RGBA, RGBtoYUVMat);
    }

    float3 RGBtoYUV(in float3 RGB)
    {
        return mul(float4(RGB, 1), RGBtoYUVMat).rgb;
    }

    float4 Lerp3(float4 backColor, float4 interColor, float4 frontColor, float mix)
    {
        mix += mix;

        float mixBack = 1 - saturate(mix);
        float mixFront = saturate(mix - 1);
        float mixInter = 1 - abs(mixBack - mixFront);

        float4 backPart =  mixBack * backColor;
        float4 interPart = mixInter * interColor;
        float4 frontPart = mixFront * frontColor;

        return backPart + interPart + frontPart;
    }

    // VALUE UTILS ==============================================================
   
    
    float ScaleOffsetScale(float x, float3 sos)
    {
        return ((x * sos.x) + sos.y) * sos.z;
    }

    float Quantize(float p, float x)
    {
        x += 1;
        return floor(p * x) / x;
    }

    float2 Quantize(float2 p, float x)
    {
        x += 1;
        return floor(p * x) / x;
    }

    float3 Quantize(float3 p, float x)
    {
        x += 1;
        return floor(p * x) / x;
    }

    float4 Quantize(float4 p, float x)
    {
        x += 1;
        return floor(p * x) / x;
    }

    float4 QuantizeXYZ(float4 p, float x)
    {
        x += 1;
        p.xyz = floor(p.xyz * x) / x;
        return p;
    }

    // ROTATION ==============================================================

    float2 r2d(float2 pt, float2 o, float a)
    {
        float x = cos(a) * (pt.x - o.x) + sin(a) * (pt.y - o.y) + o.x;
        float y = cos(a) * (pt.y - o.y) - sin(a) * (pt.x - o.x) + o.y;
        return float2(x,y);
    }

    float2 r2d(float2 pt, float a)
    {
        float x = cos(a) * pt.x + sin(a) * pt.y;
        float y = cos(a) * pt.y - sin(a) * pt.x;
        return float2(x,y);
    }

    float2 r2dCyc(float2 pt, float a)
    {   
        a *= TwoPi;
        float x = cos(a) * pt.x + sin(a) * pt.y;
        float y = cos(a) * pt.y - sin(a) * pt.x;
        return float2(x,y);
    }

    // TRANSFORM 2D ==============================================================

    float2 TransformUV(float2 uv, float4x4 transform)
    {
        return mul(float4((uv.xy * 2 - 1) * float2(1, -1) * 0.5, 0, 1), transform).xy * float2(1, -1) + 0.5;
    }
};