shader ThresholdOperations : ShaderUtils
{
    [Default(1.0f, 1.0f, 1.0f, 1.0f)]
    compose ComputeFloat4 OutputColorA;

    [Default(0.0f, 0.0f, 0.0f, 0.0f)]
    compose ComputeFloat4 OutputColorB;

    [Default(0.5f)]
    compose ComputeFloat ThresholdValue;

    [Default(0.02f)]
    compose ComputeFloat Smooth;

    bool Invert;
    bool Antialiasing;

    float4 Threshold(float4 color)
    {
        float4 c = color;
        float f = c.r;
        float th = (ThresholdValue.Compute() - 0.5) * 1.001 + 0.5;
        float fmth = f-th;

        f = fmth / max(0.00000001 + fwidth(fmth) * Antialiasing, Smooth.Compute()) + th;

        if (Invert)
            f = 1-f;

        c = lerp(OutputColorA.Compute(), OutputColorB.Compute(), saturate(f));
        return c;
    }
};


