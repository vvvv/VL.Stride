[Category("Utils")]
[Tags("mask")]

shader SetAlpha_TextureFX : TextureFX, ShaderUtils
{
    [Default(1, 1, 1, 1)]
    compose ComputeFloat4 AlphaMask;

    [EnumType("VL.Stride.Effects.TextureFX.AlphaChannel")]
    uint AlphaChannel = 1;

    [Default(1.0f)]
    compose ComputeFloat Opacity;

    int Invert;
    int KeepOriginal = true;

    stage override float4 Shading()
    {
        float4 col = InTex0();
        float4 alphaMask = AlphaMask.Compute();
        float alpha;

        switch(AlphaChannel)
        {
            case 0 : alpha = (alphaMask.r + alphaMask.g + alphaMask.b + alphaMask.a) / 4; break;
            case 1 : alpha = alphaMask.r; break;
            case 2 : alpha = alphaMask.g; break;
            case 3 : alpha = alphaMask.b; break;
            case 4 : alpha = alphaMask.a; break;
            case 5 : alpha = RGBtoHSL(alphaMask.rgb).z; break;
            case 6 : alpha = RGBtoHSL(alphaMask.rgb).y; break;
            case 7 : alpha = RGBtoHSV(alphaMask.rgb).z; break;
            case 8 : alpha = RGBtoHSV(alphaMask.rgb).x; break;
        }

        if(Invert) alpha = 1.0 - alpha;
        if(KeepOriginal) alpha *= col.a;
        alpha *= Opacity.Compute();

        return float4(col.rgb, alpha);
    }
};