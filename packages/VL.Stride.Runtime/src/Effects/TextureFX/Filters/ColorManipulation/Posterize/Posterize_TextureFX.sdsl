[Category("Filter")]
[Summary("")]

shader Posterize_TextureFX : FilterBase, ShaderUtils
{
    float4 Levels = float4(4,4,4,4);
    bool Alpha = false;
    float4 Dithering = float4(0,0,0,0);
    float Smooth = 0.1f;
    float4 Phase = float4(0,0,0,0);

    [EnumType("VL.Stride.Effects.Common.Posterize")]
    int ColorSpace;

    stage float4 Posterizer(float4 c, float2 vp)
    {
        float4 ph=(Phase);
        c=c*max(Levels,0)+Dithering*(1-Smooth)*dot(vp%2,float2(.75,.25))*frac(c*max(Levels,0));
        c+=ph;
        return (floor(c)-ph+saturate((frac(c)-.5)/(.00001+Smooth)+.5))/(max(Levels,0)+.000000001);
    }

    stage float4 PosterizerHSV(float4 c, float2 vp)
    {
        c.rgb = RGBtoHSV(c.rgb);
        c = Posterizer(c,vp);
        c.rgb = HSVtoRGB(c.rgb);
        return c;
    }

    stage float4 PosterizerHSL(float4 c, float2 vp)
    {
        c.rgb = RGBtoHSL(c.rgb);
        c = Posterizer(c,vp);
        c.rgb = HSLtoRGB(c.rgb);
        return c;
    }

    stage float4 PosterizerCMYK(float4 c, float2 vp)
    {
        float4 col = c;
        c = RGBToCMYK(c.rgb);
        c = Posterizer(c, vp);
        c = float4(CMYKToRGB(c), col.a);
        return c;
    }

    float4 Filter(float4 tex0col)
    {
        float4 c = tex0col;
        float2 vp = streams.TexCoord;
        float pa = c.a;

        switch(ColorSpace)
        {
            case 0 : c = Posterizer(c,vp); break;
            case 1 : c = PosterizerHSV(c,vp); break;
            case 2 : c = PosterizerHSL(c,vp); break;
            case 3 : c = PosterizerCMYK(c,vp); break;
        }

        if(!Alpha)c.a=pa;
        return c;
    }
};


