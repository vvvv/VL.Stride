// Copyright (c) 2015-2018, bacondither
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer
//    in this position and unchanged.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// source:
// https://github.com/bacondither/Adaptive-sharpen

[Category("Filter")]
[Summary("Image sharpening for very sharp edges and flat areas.")]

shader AdaptiveSharpenPass0_TextureFX : FilterBase, ShaderUtils
{
    float2 p1  : register(c1);

    //---------------------------------------------------------------------------------
    float a_offset = 2.0f;         // Edge channel offset, MUST BE THE SAME IN ALL PASSES
    //---------------------------------------------------------------------------------

    // Get destination pixel values
    //#define get(x,y)    ( saturate(Texture0.Sample(s0, p1*float2(x, y) + streams.TexCoord).rgb))

	float3 get(int x, int y)
	{
		return saturate(Texture0.Sample(LinearSampler, p1 * float2(x, y) + streams.TexCoord).rgb);
	}

    // Component-wise distance

    //#define b_diff(pix) ( abs(blur - c[pix]) )
    float b_diff(float3 blur, float3 c)
	{
		return abs(blur - c);
	}


    float4 Filter(float4 tex0col)
    {
		// Get points and clip out of range values (BTB & WTW)
		// [                c9                ]
		// [           c1,  c2,  c3           ]
		// [      c10, c4,  c0,  c5, c11      ]
		// [           c6,  c7,  c8           ]
		// [                c12               ]
		float3 c[13] = { get( 0, 0), get(-1,-1), get( 0,-1), get( 1,-1), get(-1, 0),
						 get( 1, 0), get(-1, 1), get( 0, 1), get( 1, 1), get( 0,-2),
						 get(-2, 0), get( 2, 0), get( 0, 2) };

		// Blur, gauss 3x3
		float3 blur = (2*(c[2]+c[4]+c[5]+c[7]) + (c[1]+c[3]+c[6]+c[8]) + 4*c[0])/16;

		// Contrast compression, center = 0.5, scaled to 1/3
		float c_comp = saturate(4.0 / 15.0 + 0.9 * exp2(dot(blur, -37.0/15.0)));

		// Edge detection
		// Relative matrix weights
		// [          1          ]
		// [      4,  5,  4      ]
		// [  1,  5,  6,  5,  1  ]
		// [      4,  5,  4      ]
		// [          1          ]
		float edge = length( 
							 1.38*(b_diff(blur, c[0]))
						   + 1.15*(b_diff(blur, c[2]) + b_diff(blur, c[4])  + b_diff(blur, c[5])  + b_diff(blur, c[7]))
						   + 0.92*(b_diff(blur, c[1]) + b_diff(blur, c[3])  + b_diff(blur, c[6])  + b_diff(blur, c[8]))
						   + 0.23*(b_diff(blur, c[9]) + b_diff(blur, c[10]) + b_diff(blur, c[11]) + b_diff(blur, c[12])));

		return float4((Texture0.Sample(LinearSampler, streams.TexCoord).rgb), (edge * c_comp + a_offset));
    }
};