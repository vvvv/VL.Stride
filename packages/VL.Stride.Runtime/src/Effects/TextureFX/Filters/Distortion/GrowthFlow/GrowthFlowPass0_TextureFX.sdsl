[Category("Filter")]
[Summary("")]
[Tags("uv, offset, distort")]
[DontConvertToLinearOnRead("Texture1")]

shader GrowthFlowPass0_TextureFX : FilterBase, ShaderUtils
{
	[Default(1.0f)]
	compose ComputeFloat Speed;

	[Default(0.1f)]
	compose ComputeFloat Fade;

	bool Reset = false;
	bool HideBrush = false;
	//float Speed = 1.0f;

	float EdgeWidth = 2.0f;
	float MapShape = 2.0f;
	float MapEdge = 2.0f;

	float mx(float3 x)
	{
		return max(x.x,max(x.y,x.z));
	}

	float surf(float2 x)
	{
		float4 c = 0;
		float2 e = EdgeWidth;// / ViewSize;

		c += 4 *  Texture0.SampleLevel(LinearSampler, x + float2( 0, 0) * e, 0);
		c += -1 * Texture0.SampleLevel(LinearSampler, x + float2( 1, 0) * e, 0);
		c += -1 * Texture0.SampleLevel(LinearSampler, x + float2(-1, 0) * e, 0);
		c += -1 * Texture0.SampleLevel(LinearSampler, x + float2( 0, 1) * e, 0);
		c += -1 * Texture0.SampleLevel(LinearSampler, x + float2( 0,-1) * e, 0);

		return smoothstep(0.03, 1.0, mx(lerp(Texture0.SampleLevel(LinearSampler, x, 0), saturate(abs(c) * 8.0 / EdgeWidth - 0.2), MapShape)));
	}


    float4 Filter(float4 tex0col)
    {
		float2 x = streams.TexCoord;
		float4 c = 0;

		float4 pre = Texture1.SampleLevel(LinearSampler, x, 0);
		float4 bru = Texture2.SampleLevel(LinearSampler, x, 0);

		float wd = surf(x);

		if(HideBrush)bru.a *= pow(wd + 0.0001, 0.25);

		float4 mc = 0;

		mc = float4(bru.rgb * bru.a, bru.a);

		for(float i=0; i<1; i += 1.0/24.0)
		{
			float2 off = sin((i + float2(0.25, 0)) * acos(-1) * 2);
			float2 dx = x + off / ViewSize * wd * Speed.Compute();
			float4 nc = Texture1.SampleLevel(LinearSampler, dx, 0);
			if(nc.a > mc.a)
			{ 
				mc= lerp(nc, mc, saturate((mc.a-nc.a) * 88));
			}
			//mc=lerp(mc,nc,smoothstep(-1,1,8*(nc.a-mc.a)));
		}

		float fade = Fade.Compute();
		mc.a *= pow(1.01, - fade * fade);
		c = mc;
		c = saturate(c);

		if(Reset)c = float4(0, 0, 0, 0);
		return c;
    }
};