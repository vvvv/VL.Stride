[Category("Filter")]
[Summary("")]
shader Tunnels_TextureFX : FilterBase
{
	[EnumType("VL.Stride.Effects.TextureFX.TunnelType")]
    int Type;

	[Default(1.0f)]
    compose ComputeFloat Time;

	[Default(0.0f)]
    compose ComputeFloat Rotation;

	[Default( 0.5f)]
    compose ComputeFloat Distance;

	[Default(0.0f)]
    compose ComputeFloat Offset;

	float FogDistance = 0.5f;
	[Color] float4 FogColor = float4(0,0,0,1);

	float3 TunnelSquare(float2 p)
	{
		float2 pRot = r2dCyc(p, Rotation.Compute());
		float2 uv;
		float r = pow(pow(pRot.x*pRot.x,3) + pow(pRot.y*pRot.y,3), 1.0/(Distance.Compute()*8));
		uv.x = .5*Time.Compute() + 0.5 / r;
		uv.y = (atan2(pRot.y,pRot.x) / 3.1416 + Offset.Compute());
		return float3(uv, r);
	}

	float3 TunnelCylinder(float2 p)
	{
		float2 uv;
		float a = atan2(p.y,p.x);
		float r = sqrt(dot(p,p))*(1-Distance.Compute());
		uv.x = .5*Time.Compute()+.5/r;
		uv.y = (a/(3.1416))+Rotation.Compute();
		return float3(uv, r);
	}

	float3 TunnelFly(float2 p)
	{
		float2 uv;
		float an = Rotation.Compute();
		float x = p.x*cos(an)-p.y*sin(an);
		float y = p.x*sin(an)+p.y*cos(an);  	
		uv.x = 0.25 * x / abs(y) * Distance.Compute() + (Offset.Compute() + 0.5);
		uv.y = 0.25*Time.Compute() + .25/abs(y) * Distance.Compute();	
		return float3(uv, y);
	}

	float4 Filter(float4 tex0col)
	{
		float2 p = -1.0 + 2.0 * streams.TexCoord;
		float3 tunnel;	
		switch((uint)Type%3)
        {
            case 0 : tunnel = TunnelSquare(p); break;
            case 1 : tunnel = TunnelCylinder(p); break;
            case 2 : tunnel = TunnelFly(p); break;
        }
		float4 col = Texture0.SampleLevel(Sampler0, tunnel.xy, 0);
		float fog = 1/(1+(FogDistance*10.0) * pow(tunnel.z/Distance.Compute(), 2));
		return lerp(col, FogColor, fog);
	}
};