[Category("Filter")]
[Summary("")]
shader Scanline_TextureFX : FilterBase
{
    [Default(1.0f)]
    compose ComputeFloat Brightness;

    [Default(1.0f, 1.0f)]
    compose ComputeFloat2 Amount;

    compose ComputeFloat2 RedShift;
    compose ComputeFloat2 GreenShift;
    compose ComputeFloat2 BlueShift;
    compose ComputeFloat2 AlphaShift;

    float4 Filter(float4 tex0col)
    {
        float2 uv = streams.TexCoord;
        
        float2 redShift = RedShift.Compute();
        float2 greenShift = GreenShift.Compute();
        float2 blueShift = BlueShift.Compute();
        float2 alphaShift = AlphaShift.Compute();
        float brightness = Brightness.Compute();

        float2 amount = Amount.Compute();

        float RedH = sin(redShift.x + uv.y * amount.x * 100);
        float GreenH = sin(greenShift.x + uv.y * amount.x * 100);
        float BlueH = sin(blueShift.x + uv.y * amount.x * 100);
        float AlphaH = sin(alphaShift.x + uv.y * amount.x * 100);

        float RedV = sin(redShift.y + uv.x * amount.y * 100);
        float GreenV = sin(greenShift.y + uv.x * amount.y * 100);
        float BlueV = sin(blueShift.y + uv.x * amount.y * 100);
        float AlphaV = sin(alphaShift.y + uv.x * amount.y * 100);

        return float4(tex0col.r * RedH * RedV * brightness, tex0col.g * GreenH * GreenV * brightness, tex0col.b * BlueH * BlueV * brightness, tex0col.a * AlphaH * AlphaV * brightness);
    }
};        